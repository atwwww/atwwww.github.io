<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Novice</title>
  
  <subtitle>总结是一件让人快乐的事情</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-03T10:46:56.482Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>WAT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux网络编程学习</title>
    <link href="http://example.com/2021/04/04/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/04/04/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-04-03T18:42:45.000Z</published>
    <updated>2021-04-03T10:46:56.482Z</updated>
    
    <content type="html"><![CDATA[<p>Linux环境下处理子进程注意的地方</p><ol><li>   Fork生成子进程，生成之后先执行父进程，再执行子进程。</li><li>   一执行fork就会产生一个和父进程并列的子进程，子进程和父进程共享代码段，但不共享数据段，所有东西都被子进程复制一遍。在子进程中更改变量的数据，不会影响到父进程的数据（如果使用vfork产生子进程则会共享数据，并且父子进程的执行顺序受exect（func）的影响，这里可以搜一下资料详细了解）。</li><li>   子进程从和父进程一样的程序点开始执行，也就是拷贝了父进程的程序计数器的内容。</li><li>   使用if判断fork的返回值，&gt;0时处于父进程的执行时间片，可以让父进程做其他工作，=0时处于子进程的执行时间片，可以让子进程做自己的事情。</li><li>   在父进程中使用循环创建子进程的过程中，在子进程创建出来之后需要进行跳出判断，否则子进程执行的时候，也会在循环中继续创建子进程。</li><li>   子进程执行完函数体之后通常用exit返回，也会返回给父进程SIGCHLD信号，父进程必须要处理这个信号，因为这时候的子进程时只有PCB的空壳，之所以保留，是系统想让子进程已经退出的信号被父进程通过某种手段感知。父进程可以采用下面的一些手段来处理子进程发出的这一信号。（由于这一信号回中断系统调用，所以通常要对慢系统调用做出预防处理）。</li></ol><p>如何处理僵尸进程：</p><ol><li><p>   父进程调用wait函数来等待子进程执行结束信号SIGCHLD，这个过程是阻塞父进程的。</p></li><li><p>   如果父进程很忙，那么可以用signal函数为SIGCHLD安装handler，说是安装，起始就是传一个函数指针，子进程终止后内核向父进程发送一个SIGCHLD信号，若父进程处于accept等慢系统调用状态，内核会让方法返回一个EINTR（被中断的系统调用），该系统调用会被中断转而进入信号的处理函数hadler。<br>在处理函数中可以使用waitpid（）判断是否有已经终止的子进程，而不要用wait（），因为wait（）会阻塞父进程。记得设置为waitpid（-1，NULL，WNHANG）,-1表示可以回收任何子进程，WNHANG表示如果当前没有已终止子进程了不要阻塞。这样如果有子进程被收集，则waitpid返回子进程的进程号，如果当前没有子进程已经终结，则返回0。如果使用sigaction来做自定义的定制的话更好，但会麻烦一点，需要写结构体的初始化。</p></li><li><p>   如果父进程不关心子进程什么时候结束，那么可以用signal（SIGCHLD,SIG_IGN）通知内核，自己对子进程的结束不感兴趣，那么子进程结束后，内核会回收， 并不再给父进程发送信号。在主进程main函数的开头写上就行了</p></li><li><p>   还有一些技巧，就是fork两次，父进程fork一个子进程，然后继续工作，子进程fork一 个孙进程后退出，那么孙进程被init接管，孙进程结束后，init会回收。不过子进程的回收 还要自己做。</p></li></ol><p>关于C、C++中socket的用法：</p><ol><li>   使用socket通信都需要创建socket，要指定创建的类型等。</li><li>   客户端申请socket完成后，将含服务端ip、port信息的结构体也填写好后，可以用connect函数请求服务端服务。</li><li>   服务端申请socket后，需要用bind（申请的socket，包含作为服务端的IP、port的信息的结构体， 结构体的长度）将这些东西连起来。</li><li>   Bind之后，就有了一个拥有初始化信息的socket，之后用listen函数将这个socket转化为监听socket，使之实现服务器的功能，转化后原来的socket就变为了监听socket。</li><li>   转化为监听socket之后，可以accpet（socket，用来装客户端信息的结构体，结构体的大小）来接收客户端发来的连接。这后面两个参数都可以设置为NULL，不过这样设置就不能从服务器端得到客户端的有关ip地址信息了。Accept返回的是通向客户端的文件描述符，是一个整形（linux里一切都是文件，所有的通道接口也都是以一个标识码为区别的文件）。</li><li>   可以使用read函数从描述符中获取信息，write函数往描述符中写入信息。</li></ol><p>Socket通信在父进程和子进程中的存在逻辑：</p><ol><li>   父进程创建子进程之后应该销毁父进程中的通信socket</li><li>   子进程被创建之后应该销毁子进程中的监听socket</li><li>   传送整形数据的时候可以先将数据转化为字符，然后再发送对应使用atoi(string)来解析</li></ol><p>关于C语言的一些使用：</p><ol><li>   C语言main函数接收的参数要从第二个开始使用，即<br>For(int I = 1 ; I &lt; argc; i++){<br>}<br>argv的第一个参数是系统用的</li><li>   字符串转化为整数的函数atoi（）</li></ol><p>Makefile文件的编写<br>可以先写自己需要的变量</p><p>CPPC = g++<br>CPPFLAGS = -Wall(显示所有警告信息)        注意给CPPC赋值的时候是等号</p><p>Name1 : 依赖的文件 a.cpp<br>        ${CPPC} ${CPPFLAGS} –o name1 a.cpp</p><p>Name2 : 依赖的文件 b.cpp<br>        ${CPPC} ${CPPFLAGS} –o name2 b.cpp</p><p>如果依赖文件不添加的话，编译第一次会成功，但是后续文件有改动了，再make就会提示已经是最新，这是因为没有写依赖文件，make不知道当前文件的修改时间和已经产生的文件的时间先后顺序，默认成了是最新的，所以依赖文件一定要写！！！</p><p>如果不写头文件的话，此次编译之后，可能会通过，但是后续你更改了头文件之后，再make，可能会提示你已经是最新的。原因和上面的一样。Make只对写到后面的依赖文件进行检查，没写到的，第一次编译过后以后不管你文件怎么改，make都认为存在的结果是最新的。</p><p>这也提醒我们在每次make工作进行之前，最好将以前的生成文件都删除，然后再进行新一轮的make。</p><p>Linux系统调用和内核的概念</p><ol><li>   系统调用的概念<br>指用高级语言调用一些系统提供的函数接口，比如读写文件等。调用之后程序会从用户态进入核心态，有了更高权限，但这时候主导权在内核，内核按照指定的流程执行调用。</li><li>   内核<br>支持操作系统运行的核心（没太了解过，自己目前认知的）</li></ol><p>一个问题：TCP通信过程中，服务器的父进程在accep到一个请求并创建一个子进程之后，会返回到accept处继续接收请求，如果没有，则父进程陷入阻塞状态。这时候父进程由于系统调用而进入了核心态。但是我们可以看到，父进程仍然会对子进程释放的死亡信号有反应，即处于核心态的父进程也被中断了，转而去处理signal（或者是sigaction）函数中自定义（有可能是自定义的）的函数过程去了。<br>系统调用核心态 —-&gt;被信号中断 —–&gt;来到处理死亡信号的代码处。<br>    这些处理死亡信号的代码是处于核心态运行的吗？当然不是，如果处于核心态运行，那我们在这些代码中可以任意的毁坏操作系统。既然这些代码处于用户态，那么操作系统是怎么从核心态被中断到用户态的呢？可以自行搜索。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux环境下处理子进程注意的地方&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;   Fork生成子进程，生成之后先执行父进程，再执行子进程。&lt;/li&gt;
&lt;li&gt;   一执行fork就会产生一个和父进程并列的子进程，子进程和父进程共享代码段，但不共享数据段，所有东西都被子进程复制一遍。在子</summary>
      
    
    
    
    <category term="学习总结" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="网络应用编程" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="-linux -socket -c/c++" scheme="http://example.com/tags/linux-socket-c-c/"/>
    
  </entry>
  
  <entry>
    <title>需求分析阶段可能用到的图</title>
    <link href="http://example.com/2021/03/31/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E5%9B%BE%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/03/31/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E5%9B%BE%E7%9A%84%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-31T08:52:12.000Z</published>
    <updated>2021-04-02T16:06:58.948Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="数据流图—表示系统的逻辑"><a href="#数据流图—表示系统的逻辑" class="headerlink" title="数据流图—表示系统的逻辑"></a>数据流图—表示系统的逻辑</h3><p>特点：箭头上标明数据流<br><img src="/img/DFD.png" width = "50%"></p><h3 id="ER图—概念模型"><a href="#ER图—概念模型" class="headerlink" title="ER图—概念模型"></a>ER图—概念模型</h3><img src="/img/er.png" width = "50%"><h3 id="状态转化图—对软件的行为建模"><a href="#状态转化图—对软件的行为建模" class="headerlink" title="状态转化图—对软件的行为建模"></a>状态转化图—对软件的行为建模</h3><img src="/img/state_diagram.png" width = "50%"><h3 id="层次方框图—自顶向下的描述数据结构"><a href="#层次方框图—自顶向下的描述数据结构" class="headerlink" title="层次方框图—自顶向下的描述数据结构"></a>层次方框图—自顶向下的描述数据结构</h3><img src="/img/layer.png" width = "50%"><h3 id="warnier图—表示信息层次结构"><a href="#warnier图—表示信息层次结构" class="headerlink" title="warnier图—表示信息层次结构"></a>warnier图—表示信息层次结构</h3><img src="/img/warnier.png" width = "50%"><h3 id="ipo图—输入数据、数据处理、输出数据的关系"><a href="#ipo图—输入数据、数据处理、输出数据的关系" class="headerlink" title="ipo图—输入数据、数据处理、输出数据的关系"></a>ipo图—输入数据、数据处理、输出数据的关系</h3><img src="/img/ipo.png" width = "50%">]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;数据流图—表示系统的逻辑&quot;&gt;&lt;a href=&quot;#数据流图—表示系统的逻辑&quot; class=&quot;headerlink&quot; title=&quot;数据流图—表示系统的逻辑&quot;&gt;&lt;/a&gt;数据流图—表示系统的逻辑&lt;/h3&gt;&lt;p&gt;特点：箭头上标明数据流&lt;br&gt;&lt;img src=&quot;</summary>
      
    
    
    
    <category term="学习总结" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="软件工程" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="软件工程" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>first_program</title>
    <link href="http://example.com/2021/03/31/first-program/"/>
    <id>http://example.com/2021/03/31/first-program/</id>
    <published>2021-03-30T18:29:52.000Z</published>
    <updated>2021-04-02T16:08:04.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a><center>helloworld</center></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;helloworld&quot;&gt;&lt;a href=&quot;#helloworld&quot; class=&quot;headerlink&quot; title=&quot;helloworld&quot;&gt;&lt;/a&gt;&lt;center&gt;helloworld&lt;/center&gt;&lt;/h1&gt;&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="Code" scheme="http://example.com/categories/Code/"/>
    
    <category term="C++" scheme="http://example.com/categories/Code/C/"/>
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
</feed>
