<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>分布式学习</title>
    <link href="/2021/04/06/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/06/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式通信技术—Java中的Socket"><a href="#分布式通信技术—Java中的Socket" class="headerlink" title="分布式通信技术—Java中的Socket"></a><center>分布式通信技术—Java中的Socket</center></h1><h2 id="1-基于tcp的点对点通信技术"><a href="#1-基于tcp的点对点通信技术" class="headerlink" title="1.基于tcp的点对点通信技术"></a>1.基于tcp的点对点通信技术</h2><p>服务端：                                            客户端<br>            创建套接字（socket）<br>            绑定服务器地址和端口(bind)<br>            监听端口(listen)                                创建套接字<br>            接受客户端请求(accept)                        客户端发送请求<br>            回送响应(write)                                客户端接收响应<br>            关闭套接字(close)                                关闭套接字</p><p>在服务器端：：</p><p>监听socket<br>只负责三次握手的监听<br>创建成功的时候会生成一个握手成功队列。<br>将握手成功的客户端socket装进队列后，监听socket继续监听其他客户端</p><p>通信socket<br>Accept（）    —当握手成功队列不为空的时候从队列中取出一个成功的socket实现实际的传输<br>对于一个成功的socket，可以由此socket调用创建输入流和输出流的管道，让这个客户的socket可以发声，可以听声</p><p>InputStream -&gt;&gt;&gt; getInputStream</p><p>OutputStream -&gt;&gt;&gt; getOutputStream</p><p>InputStream是抽象管道，可以用InputStreamReader来包装，<br>可以用InputStreamReader 可以用 BuffereReader来包装</p><h2 id="2-基于udp的点对点通信技术"><a href="#2-基于udp的点对点通信技术" class="headerlink" title="2.基于udp的点对点通信技术"></a>2.基于udp的点对点通信技术</h2><p>2.1    DatagramSocket socket = new DatagraSocket();//通信用的socket</p><p>2.2    InetAddress ip = InetAddress.getByName(“127.0.0.1”);//获取ip地址</p><p>2.3    Int serverPort = 1234;</p><p>2.4 DatagramPacket packet = new DatagraPacket(字节数组，字节数组的长度，目标主机ip，目标主机端口);</p><p>2.4    aSocket.send(packet);//发送数据</p><p>2.5    aSocket.receive(buffer,buffer.length);</p><p>UDP技术发送的是一个一个数据包。<br>                先建立DatagramSocket通信<br>                再构造DatagramPacket 数据包<br>                使用DatagramSocket的send（数据包）函数将数据包发送<br>                使用DatagramSocket的receive（buffer，buffer.length）函数阻塞等待接收数据包<br>        Receive函数会让当前进程进入阻塞状态，直到接收到数据包为止;利用这一点，可以在接收到数据包的时候才创建一个线程来处理此数据包。</p><pre><code>在UDP模式下        客户端和服务端的接收和发送都是一样的。            </code></pre><p>UDP和TCP两者的宏观区别：</p><pre><code>UDP服务端实现多线程，一个socket兼具了接收信息和返回信息的功能。TCP服务端实现多线程，监听socket一直在监听握手连接。针对每个成功的握手，都有一个独特的socket与之对应。</code></pre><h2 id="3-什么是中间件？"><a href="#3-什么是中间件？" class="headerlink" title="3.什么是中间件？"></a>3.什么是中间件？</h2><p>硬件-&gt;操作系统-&gt;中间件-&gt;应用软件</p><p>中间件的作用：</p><ol><li>   为开发者提供编程抽象，屏蔽系统底层的异构和复杂</li><li>   提供高互操作性和可移植性</li><li>   提供分布式系统的基础设施服务</li></ol><p>常用中间件：<br>1）     Jvm<br>2）    远程过程调用中间件<br>3）    分布式对象中间件<br>4）    消息队列中间件<br>5）    Web服务中间件<br>6）    P2p中间件</p><p>Tcp/ip模型<br>    应用层<br>    传输层    （tcp/udp）<br>    网络层    （ip）<br>    接口层</p><h2 id="4-什么是socket？"><a href="#4-什么是socket？" class="headerlink" title="4.什么是socket？"></a>4.什么是socket？</h2><p>传输层和网络层提供应用层的标准化接口<br>分类：<br>流式套接字（tcp，双向，有建立通信管道，有发送成功的反馈）<br>数据报套接字（udp，一个包一个包的传送，没有发送成功的反馈）<br>原始套接字</p><p>五元组：<br>    源ip，源端口，目的ip，目的端口，协议（tcp+ip）</p><h2 id="5-Java多线程的实现"><a href="#5-Java多线程的实现" class="headerlink" title="5.Java多线程的实现"></a>5.Java多线程的实现</h2><p>5.1    多线程操作公共数据的代码（方法）都需要上锁</p><p>5.2    继承Thread类和实现Runnable接口的区别</p><p>继承Thread类的优点：<br>1）    需要使用一个工具类ToolClass来继承Thread，定义一系列数据。同时实现Thread中的run方法<br>2）    在main中直接创建ToolClass的实例，通过实例调用start（）方法来开启一个线程<br>3）    各个线程之间共享代码区，但是不共享存储区，即功能一样，但是数据不能实现交流</p><p>继承Thread类的缺点：<br>1）    线程之间数据不能共享<br>2）    ToolClass继承了Thread之后就不能继承其他的类了，这是java单继承限制的。</p><p>实现Runnable接口的优点：<br>1）    也是需要一个工具类ToolClass实现Runnable，定义一系列数据，实现其run方法<br>2）    在main中创建一个ToolClass的实例，将此实例作为参数传进一个<br>new Thread（）.start()中，开启线程。<br>3）    此时线程之间可以共享代码区和数据区，可以实现众多线程对同一个资源的抢夺使用。<br>4）    Runnable是接口，此时工具类ToolClass还可以继承其他类。</p><p>5.3    Synchronized性质<br>    1）锁，用来对临界区数据的访问控制</p><pre><code>2）synchronized释放只有两种情况：        a. 线程执行完毕，自动释放        b. 线程执行过程中出现异常，jvm让线程自动释放锁。</code></pre><p>3）    当synchronized修饰的代码块中有sleep或者等待输入等情况时，也不会释放资源，从而造成资源浪费。</p><p>4）    synchronized放在普通方法上，内置锁就是当前类的实例；放在静态方法上，内置锁就是当前类的class字节码对象。即synchronized加锁的是对象。</p><p>5.4    Lock性质<br>1）    锁，用来对临界数据的访问控制</p><p>2）    当获得锁的线程处于sleep或者输入等待的时候，Lock可以让当前线程等待一定时间，然后不管有没有执行完，都让出锁，让其他线程得以使用。</p><p>3）    对于读写问题，如果用synchronized则会让多个人同时读无法进行。使用Lock机制，也可以设置一个比较好的解决方法。</p><p>5.5    基于多线程实现并发的缺点</p><ol><li>   每个请求都会被一个新的线程处理，效率比较低</li><li>   对线程的数量不加控制，操作系统要花大量的时间来切换线程，使得线程处理周期变长。</li></ol><h2 id="6-基于线程池的并发服务技术"><a href="#6-基于线程池的并发服务技术" class="headerlink" title="6.基于线程池的并发服务技术"></a>6.基于线程池的并发服务技术</h2><p>6.1    Java中线程池的执行过程：<br>1）    使用ThreadPoolExecutor来实例化一个线程池，可以指定线程池的核心线程数量和线程总数量，以及最长等待时间。也可以将核心线程设置为可被清除的。<br>2）    线程池维护核心线程存活是依靠阻塞来实现的，线程池维护一个任务队列，可以设置任务队列的长度。<br>3）    线程池中使用线程的时候，先创建核心线程，这个时期即便有空闲的核心线程在，任务来了也会继续创建核心线程。<br>4）    核心线程创建完毕之后，再来任务开始进入任务队列。在任务队列没满之前不会创建普通线程。<br>5）    任务队列满了之后，再来任务，开始创建普通线程来帮助处理任务。<br>6）    在队列已满，并且没有空闲线程可以使用的时候就会抛出异常，或者对新进的任务不予处理。</p>]]></content>
    
    
    <categories>
      
      <category>学习总结</category>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux网络编程学习（一）</title>
    <link href="/2021/04/04/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/04/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux环境下处理子进程注意的地方"><a href="#Linux环境下处理子进程注意的地方" class="headerlink" title="Linux环境下处理子进程注意的地方"></a>Linux环境下处理子进程注意的地方</h2><ol><li>   Fork生成子进程，生成之后先执行父进程，再执行子进程。</li><li>   一执行fork就会产生一个和父进程并列的子进程，子进程和父进程共享代码段，但不共享数据段，所有东西都被子进程复制一遍。在子进程中更改变量的数据，不会影响到父进程的数据（如果使用vfork产生子进程则会共享数据，并且父子进程的执行顺序受exect（func）的影响，这里可以搜一下资料详细了解）。</li><li>   子进程从和父进程一样的程序点开始执行，也就是拷贝了父进程的程序计数器的内容。</li><li>   使用if判断fork的返回值，&gt;0时处于父进程的执行时间片，可以让父进程做其他工作，=0时处于子进程的执行时间片，可以让子进程做自己的事情。</li><li>   在父进程中使用循环创建子进程的过程中，在子进程创建出来之后需要进行跳出判断，否则子进程执行的时候，也会在循环中继续创建子进程。</li><li>   子进程执行完函数体之后通常用exit返回，也会返回给父进程SIGCHLD信号，父进程必须要处理这个信号，因为这时候的子进程时只有PCB的空壳，之所以保留，是系统想让子进程已经退出的信号被父进程通过某种手段感知。父进程可以采用下面的一些手段来处理子进程发出的这一信号。（由于这一信号回中断系统调用，所以通常要对慢系统调用做出预防处理）。</li></ol><h2 id="如何处理僵尸进程："><a href="#如何处理僵尸进程：" class="headerlink" title="如何处理僵尸进程："></a>如何处理僵尸进程：</h2><ol><li><p>   父进程调用wait函数来等待子进程执行结束信号SIGCHLD，这个过程是阻塞父进程的。</p></li><li><p>   如果父进程很忙，那么可以用signal函数为SIGCHLD安装handler，说是安装，起始就是传一个函数指针，子进程终止后内核向父进程发送一个SIGCHLD信号，若父进程处于accept等慢系统调用状态，内核会让方法返回一个EINTR（被中断的系统调用），该系统调用会被中断转而进入信号的处理函数hadler。<br>在处理函数中可以使用waitpid（）判断是否有已经终止的子进程，而不要用wait（），因为wait（）会阻塞父进程。记得设置为waitpid（-1，NULL，WNHANG）,-1表示可以回收任何子进程，WNHANG表示如果当前没有已终止子进程了不要阻塞。这样如果有子进程被收集，则waitpid返回子进程的进程号，如果当前没有子进程已经终结，则返回0。如果使用sigaction来做自定义的定制的话更好，但会麻烦一点，需要写结构体的初始化。</p></li><li><p>   如果父进程不关心子进程什么时候结束，那么可以用signal（SIGCHLD,SIG_IGN）通知内核，自己对子进程的结束不感兴趣，那么子进程结束后，内核会回收， 并不再给父进程发送信号。在主进程main函数的开头写上就行了</p></li><li><p>   还有一些技巧，就是fork两次，父进程fork一个子进程，然后继续工作，子进程fork一 个孙进程后退出，那么孙进程被init接管，孙进程结束后，init会回收。不过子进程的回收 还要自己做。</p></li></ol><h2 id="关于C、C-中socket的用法："><a href="#关于C、C-中socket的用法：" class="headerlink" title="关于C、C++中socket的用法："></a>关于C、C++中socket的用法：</h2><ol><li>   使用socket通信都需要创建socket，要指定创建的类型等。</li><li>   客户端申请socket完成后，将含服务端ip、port信息的结构体也填写好后，可以用connect函数请求服务端服务。</li><li>   服务端申请socket后，需要用bind（申请的socket，包含作为服务端的IP、port的信息的结构体， 结构体的长度）将这些东西连起来。</li><li>   Bind之后，就有了一个拥有初始化信息的socket，之后用listen函数将这个socket转化为监听socket，使之实现服务器的功能，转化后原来的socket就变为了监听socket。</li><li>   转化为监听socket之后，可以accpet（socket，用来装客户端信息的结构体，结构体的大小）来接收客户端发来的连接。这后面两个参数都可以设置为NULL，不过这样设置就不能从服务器端得到客户端的有关ip地址信息了。Accept返回的是通向客户端的文件描述符，是一个整形（linux里一切都是文件，所有的通道接口也都是以一个标识码为区别的文件）。</li><li>   可以使用read函数从描述符中获取信息，write函数往描述符中写入信息。</li></ol><h2 id="Socket通信在父进程和子进程中的存在逻辑："><a href="#Socket通信在父进程和子进程中的存在逻辑：" class="headerlink" title="Socket通信在父进程和子进程中的存在逻辑："></a>Socket通信在父进程和子进程中的存在逻辑：</h2><ol><li>   父进程创建子进程之后应该销毁父进程中的通信socket</li><li>   子进程被创建之后应该销毁子进程中的监听socket</li><li>   传送整形数据的时候可以先将数据转化为字符，然后再发送对应使用atoi(string)来解析</li></ol><h2 id="关于C语言的一些使用："><a href="#关于C语言的一些使用：" class="headerlink" title="关于C语言的一些使用："></a>关于C语言的一些使用：</h2><ol><li>   C语言main函数接收的参数要从第二个开始使用，即<br>For(int I = 1 ; I &lt; argc; i++){<br>}<br>argv的第一个参数是系统用的</li><li>   字符串转化为整数的函数atoi（）</li></ol><h2 id="Makefile文件的编写"><a href="#Makefile文件的编写" class="headerlink" title="Makefile文件的编写"></a>Makefile文件的编写</h2><p>可以先写自己需要的变量</p><p>CPPC = g++<br>CPPFLAGS = -Wall(显示所有警告信息)        注意给CPPC赋值的时候是等号</p><p>Name1 : 依赖的文件 a.cpp<br>        ${CPPC} ${CPPFLAGS} –o name1 a.cpp</p><p>Name2 : 依赖的文件 b.cpp<br>        ${CPPC} ${CPPFLAGS} –o name2 b.cpp</p><p>如果依赖文件不添加的话，编译第一次会成功，但是后续文件有改动了，再make就会提示已经是最新，这是因为没有写依赖文件，make不知道当前文件的修改时间和已经产生的文件的时间先后顺序，默认成了是最新的，所以依赖文件一定要写！！！</p><p>如果不写头文件的话，此次编译之后，可能会通过，但是后续你更改了头文件之后，再make，可能会提示你已经是最新的。原因和上面的一样。Make只对写到后面的依赖文件进行检查，没写到的，第一次编译过后以后不管你文件怎么改，make都认为存在的结果是最新的。</p><p>这也提醒我们在每次make工作进行之前，最好将以前的生成文件都删除，然后再进行新一轮的make。</p><h2 id="Linux系统调用和内核的概念"><a href="#Linux系统调用和内核的概念" class="headerlink" title="Linux系统调用和内核的概念"></a>Linux系统调用和内核的概念</h2><ol><li>   系统调用的概念<br>指用高级语言调用一些系统提供的函数接口，比如读写文件等。调用之后程序会从用户态进入核心态，有了更高权限，但这时候主导权在内核，内核按照指定的流程执行调用。</li><li>   内核<br>支持操作系统运行的核心（没太了解过，自己目前认知的）</li></ol><h2 id="一个问题："><a href="#一个问题：" class="headerlink" title="一个问题："></a>一个问题：</h2><p>TCP通信过程中，服务器的父进程在accep到一个请求并创建一个子进程之后，会返回到accept处继续接收请求,如果没有，则父进程陷入阻塞状态。这时候父进程由于系统调用而进入了核心态。但是我们可以看到，父进程仍然会对子进程释放的死亡信号有反应，即处于核心态的父进程也被中断了，转而去处理signal（或者是sigaction）函数中自定义（有可能是自定义的）的函数过程去了。<br>    系统调用核心态 —-&gt;被信号中断 —–&gt;来到处理死亡信号的代码处。<br>这些处理死亡信号的代码是处于核心态运行的吗？当然不是，如果处于核心态运行，那我们在这些代码中可以任意的毁坏操作系统。既然这些代码处于用户态，那么操作系统是怎么从核心态被中断到用户态的呢？可以自行搜索。</p>]]></content>
    
    
    <categories>
      
      <category>学习总结</category>
      
      <category>网络应用编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>linux</tag>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>需求分析阶段可能用到的图</title>
    <link href="/2021/03/31/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E5%9B%BE%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/31/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E5%9B%BE%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="数据流图—表示系统的逻辑"><a href="#数据流图—表示系统的逻辑" class="headerlink" title="数据流图—表示系统的逻辑"></a>数据流图—表示系统的逻辑</h3><p>特点：箭头上标明数据流<br><img src="/img/DFD.png" width = "50%"></p><h3 id="ER图—概念模型"><a href="#ER图—概念模型" class="headerlink" title="ER图—概念模型"></a>ER图—概念模型</h3><img src="/img/er.png" width = "50%"><h3 id="状态转化图—对软件的行为建模"><a href="#状态转化图—对软件的行为建模" class="headerlink" title="状态转化图—对软件的行为建模"></a>状态转化图—对软件的行为建模</h3><img src="/img/state_diagram.png" width = "50%"><h3 id="层次方框图—自顶向下的描述数据结构"><a href="#层次方框图—自顶向下的描述数据结构" class="headerlink" title="层次方框图—自顶向下的描述数据结构"></a>层次方框图—自顶向下的描述数据结构</h3><img src="/img/layer.png" width = "50%"><h3 id="warnier图—表示信息层次结构"><a href="#warnier图—表示信息层次结构" class="headerlink" title="warnier图—表示信息层次结构"></a>warnier图—表示信息层次结构</h3><img src="/img/warnier.png" width = "50%"><h3 id="ipo图—输入数据、数据处理、输出数据的关系"><a href="#ipo图—输入数据、数据处理、输出数据的关系" class="headerlink" title="ipo图—输入数据、数据处理、输出数据的关系"></a>ipo图—输入数据、数据处理、输出数据的关系</h3><img src="/img/ipo.png" width = "50%">]]></content>
    
    
    <categories>
      
      <category>学习总结</category>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>first_program</title>
    <link href="/2021/03/31/first-program/"/>
    <url>/2021/03/31/first-program/</url>
    
    <content type="html"><![CDATA[<h1 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a><center>helloworld</center></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
